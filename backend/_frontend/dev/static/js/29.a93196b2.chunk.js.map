{"version":3,"file":"static/js/29.a93196b2.chunk.js","mappings":"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","sources":["pages/Catalog/components/ArtifactCard.jsx","pages/Catalog/components/CatalogPagination.jsx","pages/Catalog/components/CatalogFilter.jsx","hooks/useFetchItems.jsx","pages/Catalog/components/BulkDownloadArtifactForm.jsx","pages/ArtifactDetails/components/DownloadArtifactButton.jsx","pages/Catalog/components/requestDetails.jsx","pages/Catalog/Catalog.jsx"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  CardMedia,\n  Chip,\n  Typography,\n  Box,\n  Tooltip,\n  Checkbox \n} from \"@mui/material\";\nimport { Category, Diversity3,CheckCircle } from \"@mui/icons-material\";\nimport { styled } from \"@mui/material/styles\";\n\n/**\n * The ArtifactCard component represents a card displaying summarized information about an artifact.\n * It includes artifact metadata like shape, culture, tags, and description, with optional image preview.\n * @param {object} artifact - The artifact object containing id, attributes, and thumbnail information.\n * @param {boolean} isSelecionMode - this variable tell us if the selectionMode is activate or not. \n * @param {function} onSelectArtifact - Function to add the artifact to the list of selectedArtifacts\n * @param {boolean} selected // This variable tells us if the artifact is already selected or not, indicating if the checkbox is marked.\n * @returns {JSX.Element} Component for displaying an artifact card.\n */\nconst ArtifactCard = ({ artifact, isSelectionMode,onSelectArtifact,selected}) => {\n  const navigate = useNavigate();\n  const { id, attributes, thumbnail: previewPath } = artifact;\n  const { shape, tags, culture, description } = attributes;\n\n  // Joining tags into a comma-separated string\n  const flattenTags = tags.map((tag) => tag.value).join(\", \");\n\n  // Slicing tags to show only the first two followed by a count if more than two tags exist\n  const slicedTags = tags\n    .slice(0, 2)\n    .map((tag) => tag.value)\n    .join(\", \")\n    .concat(`${tags.length > 2 ? `, (+${tags.length - 2})` : \"\"}`);\n\n  // Handles navigation to detailed artifact view\n  const handleRedirect = () => {\n    navigate(`/catalog/${id}`);\n  };\n\n  return (\n    <Card sx={{ position: \"relative\", border:  \"1px solid grey\" }}>\n      {/* if button is in selection mode */}\n      {isSelectionMode &&  ( \n        <Checkbox \n          sx={{ position: \"absolute\", top: 8, left: 8, color:  \"grey\" }}\n          checked={selected}\n          onClick={(e) => {\n            e.stopPropagation(); \n            onSelectArtifact(artifact);\n          }}\n        >\n          <CheckCircle />\n        </Checkbox >\n      )}\n\n      {/* Displaying preview image or default image if previewPath is not available */}\n      {previewPath ? (\n        <CustomCardMedia\n          component=\"img\"\n          height=\"140\"\n          image={previewPath}\n          alt={id}\n          onClick={handleRedirect}\n          style={{ objectFit: \"contain\", backgroundColor: \"black\" }}\n        />\n      ) : (\n        <CustomCardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"/not_found_image.png\"\n          alt={id}\n          onClick={handleRedirect}\n        />\n      )}\n      <CustomCardContent>\n        {/* Metadata section displaying shape and culture */}\n        <MetadataContainer>\n          <CustomShapeTag\n            label={shape.value}\n            size=\"small\"\n            icon={<Category color=\"inherit\" fontSize=\"small\" />}\n          />\n          <CustomCultureTag\n            label={culture.value}\n            size=\"small\"\n            icon={<Diversity3 color=\"inherit\" fontSize=\"small\" />}\n          />\n        </MetadataContainer>\n        {/* Title with artifact ID */}\n        <Typography variant=\"h5\" component=\"div\">\n          Pieza {id}\n        </Typography>\n        {/* Tooltip to display tags with ellipsis for long text */}\n        <Tooltip arrow title={tags.length > 2 ? flattenTags : \"\"}>\n          <EllipsisBox>\n            <Typography\n              color=\"text.secondary\"\n              overflow={\"hidden\"}\n              textOverflow={\"ellipsis\"}\n            >\n              {slicedTags ? `Etiquetas: ${slicedTags}` : \"Sin etiquetas\"}\n            </Typography>\n          </EllipsisBox>\n        </Tooltip>\n        {/* Tooltip to display description with ellipsis for long text */}\n        <Tooltip arrow title={description.length > 50 ? description : \"\"}>\n          <EllipsisBox>\n            <Typography\n              variant=\"body2\"\n              overflow={\"hidden\"}\n              textOverflow={\"ellipsis\"}\n            >\n              {description}\n            </Typography>\n          </EllipsisBox>\n        </Tooltip>\n      </CustomCardContent>\n    </Card>\n  );\n};\n\n// Styled components for customizing UI elements\n\n// Custom styled CardMedia for image preview\nconst CustomCardMedia = styled(CardMedia)(({ theme }) => ({\n  cursor: \"pointer\",\n}));\n\n// Custom styled Box for handling text overflow with ellipsis\nconst EllipsisBox = styled(Box)(({ theme }) => ({\n  width: \"100%\",\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\",\n}));\n\n// Custom styled CardContent for flexbox layout and spacing\nconst CustomCardContent = styled(CardContent)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"flex-start\",\n  rowGap: 5,\n}));\n\n// Custom styled Box for metadata container with flex layout and spacing\nconst MetadataContainer = styled(Box)(({ theme }) => ({\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  flexDirection: \"row\",\n  gap: theme.spacing(1),\n}));\n\n// Custom styled Chip for shape tag with specific background color and size\nconst CustomShapeTag = styled(Chip)(({ theme }) => ({\n  backgroundColor: theme.palette.tags.shape,\n  fontSize: 10,\n  height: 24,\n  paddingLeft: theme.spacing(1),\n  paddingRight: theme.spacing(1),\n  '& .MuiChip-icon': {\n    fontSize: 14,\n  },\n}));\n\n// Custom styled Chip for culture tag with specific background color and size\nconst CustomCultureTag = styled(Chip)(({ theme }) => ({\n  backgroundColor: theme.palette.tags.culture,\n  fontSize: 10,\n  height: 24,\n  paddingLeft: theme.spacing(1),\n  paddingRight: theme.spacing(1),\n  '& .MuiChip-icon': {\n    fontSize: 14,\n  },\n}));\n\nexport default ArtifactCard;\n\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Pagination } from \"@mui/material\";\nimport { useSearchParams } from \"react-router-dom\";\n\n/**\n * The CatalogPagination component provides pagination controls for navigating through catalog pages.\n * It allows users to change the current page and updates the URL accordingly.\n * @param {object} pagination - The current pagination state containing currentPage and totalPages.\n * @param {function} setPagination - Function to update the pagination state.\n * @returns {JSX.Element} Component for pagination controls.\n */\nconst CatalogPagination = ({ pagination, setPagination }) => {\n  const { currentPage, totalPages } = pagination;\n\n  // Search params from the URL\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Avoid updating the URL when the component mounts and there are search params already\n  const [updateParamsFlag, setUpdateParamsFlag] = useState(false);\n\n/**\n   * Updates the currentPage state when the page changes.\n   * @param {object} event - The event object from the Pagination component.\n   * @param {number} page - The selected page number.\n   */\n  const handlePageChange = (_, page) => {\n    setPagination({ ...pagination, currentPage: page });\n  };\n\n  // Initialize the pagination state with the search params\n  useEffect(() => {\n    const page = searchParams.get(\"page\")\n      ? parseInt(decodeURIComponent(searchParams.get(\"page\")))\n      : 1;\n    setPagination({ ...pagination, currentPage: page });\n    setUpdateParamsFlag(true);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Update the URL when the current page changes\n  useEffect(() => {\n    if (!updateParamsFlag) {\n      return;\n    }\n    searchParams.set(\"page\", currentPage);\n    setSearchParams(searchParams);\n  }, [currentPage]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" p={2}>\n      <Pagination\n        count={totalPages}\n        page={currentPage}\n        onChange={handlePageChange}\n        color=\"primary\"\n      />\n    </Box>\n  );\n};\n\nexport default CatalogPagination;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Autocomplete,\n  TextField,\n  Grid,\n  Stack,\n  InputAdornment,\n  IconButton,\n} from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport Clear from \"@mui/icons-material/Clear\";\nimport { styled } from \"@mui/system\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { API_URLS } from \"../../../api\";\nimport { useSnackBars } from \"../../../hooks/useSnackbars\";\nimport { useToken } from \"../../../hooks/useToken\";\n\n/**\n * The CatalogFilter component allows users to filter artifacts by query, shape, culture, and tags.\n * It provides text inputs and autocomplete dropdowns for each filter category.\n * @param {object} filter - The current filter state containing query, shape, culture, and tags.\n * @param {function} setFilter - Function to update the filter state.\n * @returns {JSX.Element} Component for filtering artifacts.\n */\nconst CatalogFilter = ({ filter, setFilter ,options}) => {\n  const { addAlert } = useSnackBars();\n  const { token } = useToken();\n  // Search params from the URL\n  const [searchParams, setSearchParams] = useSearchParams();\n  // Avoid updating the URL when the component mounts and there are search params already\n  const [updateParamsFlag, setUpdateParamsFlag] = useState(false);\n\n  // Retrieved data from the API\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState(false);\n  const [shapeOptions, setShapeOptions] = useState([]);\n  const [cultureOptions, setCultureOptions] = useState([]);\n  const [tagOptions, setTagOptions] = useState([]);\n\n  /**\n   * Updates the filter state when a filter option changes.\n   * @param {string} name - The name of the filter category (query, shape, culture, tags).\n   * @param {string | string[]} value - The new value(s) for the filter category.\n   */\n  const handleFilterChange = (name, value) => {\n    setFilter({ ...filter, [name]: value });\n  };\n\n  // Initialize the filter state with the search params\n  useEffect(() => {\n    const query = searchParams.get(\"query\")\n      ? decodeURIComponent(searchParams.get(\"query\"))\n      : \"\";\n    const shape = searchParams.get(\"shape\")\n      ? decodeURIComponent(searchParams.get(\"shape\"))\n      : \"\";\n    const culture = searchParams.get(\"culture\")\n      ? decodeURIComponent(searchParams.get(\"culture\"))\n      : \"\";\n    const tags = searchParams.get(\"tags\")\n      ? decodeURIComponent(searchParams.get(\"tags\"))\n      : \"\";\n    const tagsArray = tags?.split(\",\").filter((tag) => tag);\n    setFilter({ query, shape, culture, tags: tagsArray });\n    setUpdateParamsFlag(true);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Fetch data from the API\n  useEffect(() => {\n    fetch(API_URLS.ALL_METADATA, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.detail);\n        }\n        return response.json();\n      })\n      .then((response) => {\n        let metadata = response.data;\n        let shapes = metadata.shapes;\n        let shapesNames = shapes.map((shape) => shape.value);\n        let cultures = metadata.cultures;\n        let culturesNames = cultures.map((culture) => culture.value);\n        let tags = metadata.tags;\n        let tagsNames = tags.map((tag) => tag.value);\n\n        setShapeOptions(shapesNames);\n        setCultureOptions(culturesNames);\n        setTagOptions(tagsNames);\n      })\n      .catch((error) => {\n        setErrors(true);\n        addAlert(\"Error al cargar los metadatos\");\n      })\n      .finally(() => setLoading(false));\n  }, [token]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Update the URL search params when the user applies a filter\n  useEffect(() => {\n    if (!updateParamsFlag) {\n      return;\n    }\n    if (filter.query) {\n      searchParams.set(\"query\", filter.query);\n    } else {\n      searchParams.delete(\"query\");\n    }\n    if (filter.shape) {\n      searchParams.set(\"shape\", filter.shape);\n    } else {\n      searchParams.delete(\"shape\");\n    }\n    if (filter.culture) {\n      searchParams.set(\"culture\", filter.culture);\n    } else {\n      searchParams.delete(\"culture\");\n    }\n    if (filter.tags.length > 0) {\n      searchParams.set(\"tags\", filter.tags.join(\",\"));\n    } else {\n      searchParams.delete(\"tags\");\n    }\n    setSearchParams(searchParams);\n  }, [filter]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() =>{\n    console.log(options)\n    \n    if (Object.keys(options).length === 0 && options.constructor === Object) {\n      console.log(\"El objeto está vacío\");\n    } else {\n      setShapeOptions(options.shapes);\n      setCultureOptions(options.cultures);\n      setTagOptions(options.tags);\n    }\n\n  },[options])\n\n\n  return (\n    <CustomBox>\n      {/* Text field for searching by query */}\n      <TextField\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n          endAdornment: filter.query && (\n            <InputAdornment position=\"end\">\n              {/* Button to clear search */}\n              <IconButton\n                aria-label=\"Clear search\"\n                onClick={() => handleFilterChange(\"query\", \"\")}\n                onMouseDown={(event) => event.preventDefault()}\n                edge=\"end\"\n                size=\"small\"\n              >\n                <Clear />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n        label=\"Buscar\"\n        variant=\"outlined\"\n        fullWidth\n        name=\"query\"\n        value={filter.query}\n        onChange={(event) =>\n          handleFilterChange(event.target.name, event.target.value)\n        }\n      />\n      {/* Autocomplete dropdowns for shape, culture, and tags */}\n      <CustomStack direction=\"row\">\n        <Autocomplete\n          fullWidth\n          id=\"shape\"\n          name=\"shape\"\n          value={filter.shape}\n          onChange={(value) =>\n            handleFilterChange(\"shape\", value.target.textContent)\n          }\n          options={shapeOptions}\n          getOptionLabel={(option) => option ?? \"\"}\n          noOptionsText=\"No hay formas con ese nombre\"\n          filterSelectedOptions\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Forma\"\n              placeholder=\"Filtrar por forma\"\n            />\n          )}\n          disabled={loading || errors}\n        />\n        {/* Autocomplete for culture */}\n        <Autocomplete\n          fullWidth\n          id=\"culture\"\n          name=\"culture\"\n          value={filter.culture}\n          onChange={(value) =>\n            handleFilterChange(\"culture\", value.target.textContent)\n          }\n          options={cultureOptions}\n          getOptionLabel={(option) => option ?? \"\"}\n          noOptionsText=\"No hay culturas con ese nombre\"\n          filterSelectedOptions\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Cultura\"\n              placeholder=\"Filtrar por cultura\"\n            />\n          )}\n          disabled={loading || errors}\n        />\n        {/* Autocomplete for tags */}\n        <Autocomplete\n          multiple\n          limitTags={2}\n          fullWidth\n          id=\"tags\"\n          name=\"tags\"\n          value={filter.tags}\n          onChange={(event, value) =>\n            handleFilterChange(\n              \"tags\",\n              value.map((tag) => tag)\n            )\n          }\n          options={tagOptions}\n          getOptionLabel={(option) => option ?? \"\"}\n          noOptionsText=\"No hay etiquetas con ese nombre\"\n          filterSelectedOptions\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Etiquetas\"\n              placeholder=\"Filtrar por etiquetas\"\n            />\n          )}\n          disabled={loading || errors}\n        />\n      </CustomStack>\n    </CustomBox>\n  );\n};\n\n// Custom styled Grid container for layout and spacing\nconst CustomBox = styled(Grid)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  gap: theme.spacing(2),\n  marginBottom: theme.spacing(3),\n}));\n\n// Custom styled Stack for arranging Autocomplete components horizontally\nconst CustomStack = styled(Stack)(({ theme }) => ({\n  width: \"100%\",\n  columnGap: theme.spacing(2),\n}));\n\nexport default CatalogFilter;","import { useEffect, useState } from \"react\";\nimport { useSnackBars } from \"./useSnackbars\";\nimport { useToken } from \"./useToken\";\n\n/**\n * Custom hook for fetching items from an API based on filter criteria and pagination.\n * @param {string} baseUrl The base URL of the API endpoint for fetching items.\n * @returns {{\n *   items: Array,       // Array of items fetched from the API.\n *   loading: boolean,   // Indicates if data is currently being fetched.\n *   filter: Object,     // Current filter criteria for fetching items.\n *   setFilter: Function,// Function to update filter criteria.\n *   pagination: Object, // Pagination information (current page, total items, etc.).\n *   setPagination: Function // Function to update pagination information.\n * }}\n */\nconst useFetchItems = (baseUrl) => {\n  const { token } = useToken(); // Retrieves authentication token using custom hook useToken.\n  const { addAlert } = useSnackBars(); // Retrieves alert function using custom hook useSnackBars.\n  const [loading, setLoading] = useState(true); // State to track loading state of data fetching.\n  const [options,setOptions] = useState({});  \n  // State to manage filter criteria for fetching items.\n  const [filter, setFilter] = useState({\n    query: \"\",\n    shape: \"\",\n    culture: \"\",\n    tags: [],\n  });\n\n  // State to manage pagination information for fetched items.\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    total: 0,\n    perPage: 0,\n    totalPages: 0,\n  });\n\n  // State to store fetched items from the API.\n  const [items, setItems] = useState([]);\n\n  // Reset the current page when the filter changes\n  useEffect(() => {\n    setPagination({ ...pagination, currentPage: 1 });\n  }, [filter]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Fetch data from the API\n  useEffect(() => {\n    // Use setTimeout as debounce to avoid making a request on every keystroke\n    const timeoutId = setTimeout(() => {\n      let url = new URL(baseUrl, window.location.origin);\n      let params = {\n        query: filter.query,\n        shape: filter.shape,\n        culture: filter.culture,\n        tags: filter.tags.join(\",\"),\n        page: pagination.currentPage,\n      };\n      Object.keys(params).forEach(\n        (key) => params[key] && url.searchParams.append(key, params[key])\n      );\n      fetch(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n        .then((response) => response.json())\n        .then((response) => {\n          const {\n            current_page: currentPage,\n            per_page: perPage,\n            total_pages: totalPages,\n            total,\n            data,\n            filters \n          } = response;\n          setPagination({ currentPage, total, perPage, totalPages });\n          setItems(data);\n          setOptions(filters);\n        })\n        .catch((error) => {\n          addAlert(error.message);\n        })\n        .finally(() => setLoading(false));\n    }, 500); // delay of 500ms\n\n    return () => clearTimeout(timeoutId); // cleanup on unmount or filter change\n  }, [filter, pagination.currentPage, token]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Return objects and functions for external use.\n  return {\n    items,\n    loading,\n    filter,\n    setFilter,\n    pagination,\n    setPagination,\n    options\n  };\n};\n\nexport default useFetchItems;\n","import React, { useState, useEffect } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { Stack, Paper, InputLabel, Autocomplete } from \"@mui/material\";\nimport { API_URLS } from \"../../../api\";\nimport { useSnackBars } from \"../../../hooks/useSnackbars\";\nimport { useToken } from \"../../../hooks/useToken\";\n\n/**\n * BulkDownloadArtifactForm  renders a form for downloading multiple artifact data.\n * @param {Array} artifactInfoList List of artifacts being downloaded.\n * @param {Function} handleClose Function to close the modal or form.\n * @returns {JSX.Element} JSX element containing a form for artifact download.\n */\nconst BulkDownloadArtifactForm  = ({ artifactInfoList, handleClose }) => {\n  const { token } = useToken(); // Retrieves authentication token from TokenProvider\n  const { addAlert } = useSnackBars(); // Accesses addAlert function from SnackbarProvider\n  const [institutions, setInstitutions] = useState([]); // State for storing institutions data\n  const [formValues, setFormValues] = useState({ // State for form input values\n    fullName: \"\",\n    rut: \"\",\n    email: \"\",\n    repeatEmail: \"\",\n    institution: { id: \"\", value: \"\" },\n    comments: \"\",\n  });\n  const [rutError, setRutError] = useState(false); // State for RUT validation error\n  const [loading, setLoading] = useState(true); // State for loading state\n  const [errors, setErrors] = useState(false); // State for general errors\n  const [emailMatchError, setEmailMatchError] = useState(false);  // Error state for email mismatch\n  useEffect(() => {\n    console.log(\"Artifact info en el formulario:\", artifactInfoList);\n  }, [artifactInfoList]); \n\n// Fetch institutions data from API on component mount\n  useEffect(() => {\n    fetch(API_URLS.ALL_INSTITUTIONS, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        response.json().then((data) => {\n          if (!response.ok) {\n            throw new Error(data.detail);\n          }\n          let institutions = Array.from(data.data);\n          setInstitutions(institutions);\n\n        }).catch((error) => {\n          setErrors(true);\n          addAlert(error.message);\n        }).finally(() => {\n          setLoading(false)\n        })})\n      }, [token]); // eslint-disable-line react-hooks/exhaustive-deps\n\n// Handle form input changes\n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      setFormValues({\n        ...formValues,\n        [name]: value,\n      });\n\n       // Check if emails match on every change to email fields\n       if (name === \"email\" || name === \"repeatEmail\") {\n        checkEmailsMatch(value, name);\n      }\n    };\n    \n// Function to check if email and repeatEmail match\nconst checkEmailsMatch = (value, fieldName) => {\n  const email = fieldName === \"email\" ? value : formValues.email;\n  const repeatEmail = fieldName === \"repeatEmail\" ? value : formValues.repeatEmail;\n  setEmailMatchError(email !== repeatEmail);  // Update error state if emails don't match\n};\n // Handle download request\n const handleDownloadRequest = async (formValues) => {\n    try {\n      const body = {\n        fullName: formValues.fullName,\n        rut: formValues.rut,\n        email: formValues.email,\n        institution: formValues.institution.id,\n        comments: formValues.comments,\n        artifacts: artifactInfoList.map((artifact) => artifact.id), // send all artifact's id\n        authenticated:false\n      };\n  \n      //send the post to backend\n      const response = await fetch(`${API_URLS.DETAILED_ARTIFACT}/bulkdownloading`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n  \n      const data = await response.json();\n  \n      // Verifica si la solicitud fue exitosa y muestra una alerta\n      if (!response.ok) {\n        addAlert(data.detail);\n        return;\n      }\n      // success alert\n      addAlert(\"Solicitud enviada exitosamente. Recibirá un correo cuando la descarga esté lista.\");\n    } catch (error) {\n      addAlert(\"Error al enviar solicitud de descarga\");\n    }\n  };\n\n// Handle form submission\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      console.log('tratando de enviar formuilario')\n      // Assuming formValues contains a 'rut' field that needs to be validated\n\n      if (emailMatchError) {\n        addAlert(\"Los correos electrónicos no coinciden.\");\n        return;\n      }\n      \n      if (!validateRut(formValues.rut)) {\n        setRutError(true);\n        console.log('malo el rut')\n        return; // Stop the form submission process\n      }\n  \n      // Reset RUT error if validation passes\n      setRutError(false);\n      // Proceed with download process\n      handleDownloadRequest(formValues);\n      handleClose(); // Close the form or modal after submission\n    };\n\n    return (\n      <Paper>\n        <CustomStack>\n          <CustomBox\n            component=\"form\"\n            autoComplete=\"off\"\n            onSubmit={handleSubmit}\n            onChange={handleChange}\n            sx={{\n              maxWidth: '100%',  \n            }}\n          >\n            <CustomTypography variant=\"h6\">\n              Para descargar los datos debe llenar este formulario de solicitud\n            </CustomTypography>\n            <Stack>\n              <InputLabel>\n                <b>Nombre Completo *</b>\n              </InputLabel>\n              <TextField\n                required\n                id=\"fullName\"\n                name=\"fullName\"\n                margin=\"normal\"\n                value={formValues.fullName}\n              />\n            </Stack>\n\n            <Stack>\n              <InputLabel>\n                <b>Rut *</b>\n              </InputLabel>\n              <TextField\n                required\n                id=\"rut\"\n                name=\"rut\"\n                margin=\"normal\"\n                placeholder=\"123456789\"\n                value={formValues.rut}\n                error={rutError} // Show error style if there's a RUT error\n                helperText={rutError ? \"RUT inválido\" : \"Sin puntos ni guión\"} // Display the RUT error message\n              />\n            </Stack>\n\n            <Stack>\n              <InputLabel>\n                <b>Correo Electrónico*</b>\n              </InputLabel>\n              <TextField\n                required\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                margin=\"normal\"\n                value={formValues.email}\n              />\n            </Stack>\n            <Stack>\n            <InputLabel>\n                <b>Repetir Correo Electrónico *</b>\n              </InputLabel>\n              <TextField\n                required\n                id=\"repeatEmail\"\n                name=\"repeatEmail\"\n                type=\"email\"\n                margin=\"normal\"\n                value={formValues.repeatEmail}\n                error={emailMatchError}  // Show error if emails don't match\n                helperText={emailMatchError ? \"Los correos electrónicos no coinciden\" : \"\"}\n              />\n            </Stack>\n            <Stack>\n              <InputLabel>\n                <b>Institución *</b>\n              </InputLabel>\n              <Autocomplete\n                id=\"institution\"\n                name=\"institution\"\n                value={formValues.institution}\n                onChange={(name, value) => {\n                  setFormValues({\n                    ...formValues,\n                    institution: value,\n                  });\n                }}\n                options={institutions}\n                noOptionsText=\"No hay instituciones disponibles\"\n                getOptionLabel={(option) => option.value ?? \"\"}\n                filterSelectedOptions\n                renderInput={(params) => (\n                  <TextField\n                    key={\"institution\"}\n                    {...params}\n                    required={true}\n                    placeholder={\"Seleccione una institución\"}\n                  />\n                )}\n                disabled={loading || errors}\n              />\n            </Stack>\n            <Stack>\n              <InputLabel>\n                <b>Motivo de solicitud (Opcional)</b>\n              </InputLabel>\n              <TextField\n                id=\"comments\"\n                name=\"comments\"\n                multiline\n                margin=\"normal\"\n                value={formValues.comments}\n              />\n            </Stack>\n            <OptionBox>\n              <CustomButton\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClose}\n              >\n                Cancelar\n              </CustomButton>\n\n              <CustomButton variant=\"contained\" color=\"primary\" type=\"submit\">\n                Enviar\n              </CustomButton>\n            </OptionBox>\n          </CustomBox>\n        </CustomStack>\n      </Paper>\n    );\n  };\n\n// Styled components for custom styling\n  const CustomStack = styled(Stack)(({ theme }) => ({\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  }));\n\n  const CustomTypography = styled(Typography)(({ theme }) => ({\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(3),\n  }));\n\n  const CustomBox = styled(Box)(({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(2),\n    maxHeight: \"100vh\", // Limita la altura máxima\n    overflowY: \"auto\", // Habilita el desplazamiento interno si es necesario\n    margin: \"0 auto\", // Centra horizontalmente\n  }));\n\n  const CustomButton = styled(Button)(({ theme }) => ({\n    marginTop: theme.spacing(3.5),\n  }));\n\n  const OptionBox = styled(Box)(({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"flex-end\",\n    padding: theme.spacing(3),\n    gap: theme.spacing(2),\n  }));\n\n\n  \n\n/**\n   * validateRut validates the format and checksum of a Chilean RUT.\n   * @param {string} rutStr The RUT string to be validated.\n   * @returns {boolean} True if the RUT is valid, false otherwise.\n   */\nconst validateRut = (rutStr) => {\n  // Normalize the RUT: remove dots and dashes, and convert to uppercase\n  const normalizedRut = rutStr.replace(/\\./g, \"\").replace(/-/g, \"\").toUpperCase();\n\n  // Ensure the RUT has at least 2 characters (body + DV)\n  if (normalizedRut.length < 2) {\n    return false;\n  }\n\n  // Separate the body and the verification digit (DV)\n  const rutBody = normalizedRut.slice(0, -1); // All except the last character\n  const rutDv = normalizedRut.slice(-1); // Last character\n\n  // Ensure the body is numeric\n  if (!/^\\d+$/.test(rutBody)) {\n    return false;\n  }\n\n  // Calculate the verification digit\n  let total = 0;\n  let factor = 2;\n\n  // Loop through the body digits from right to left\n  for (let i = rutBody.length - 1; i >= 0; i--) {\n    total += parseInt(rutBody[i]) * factor;\n    factor = factor === 7 ? 2 : factor + 1;\n  }\n\n  const rest = total % 11;\n  const calculatedDv = 11 - rest;\n\n  // Map calculated DV to its string representation\n  const validDv = calculatedDv === 10 ? \"K\" : calculatedDv === 11 ? \"0\" : calculatedDv.toString();\n\n  // Return whether the entered DV matches the calculated one\n  return validDv === rutDv;\n};\n  export default BulkDownloadArtifactForm;\n","import { useState } from \"react\";\nimport { Modal, Button } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport React from \"react\";\n\n/**\n * DownloadArtifactButton component renders a button that opens a modal dialog on click.\n * @param {string} text The text displayed on the button.\n * @param {ReactNode} children Optional content to be rendered inside the modal dialog.\n * @returns {JSX.Element} JSX element containing a button and a modal dialog.\n */\nconst DownloadArtifactButton = ({ text, children }) => {\n  const [open, setOpen] = useState(false);// State to manage modal open/close\n  \n  // Function to open the modal\n  const handleOpen = () => setOpen(true);\n  \n  // Function to close the modal\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n    {/* Button to trigger modal */}\n      <Button onClick={handleOpen} variant=\"contained\">\n        {text}\n      </Button>\n       {/* Modal dialog */}\n      <CustomModal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <div>{children && React.cloneElement(children, { handleClose })}</div>\n      </CustomModal>\n    </div>\n  );\n};\n\n// Styled Modal component for custom styling\nconst CustomModal = styled(Modal)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  marginTop: '2.5vh',\n  marginBottom: '2.5vh',\n  paddingTop: '20vh',\n  // maxHeight: '95vh',\n  overflow: 'auto',\n}));\n\nexport default DownloadArtifactButton;\n","import React from \"react\";\nimport { Box, Typography, Button, List, ListItem, Divider, Container } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport { useSelection } from \"../../../selectionContext\";\nimport { API_URLS } from \"../../../api\";\nimport { useToken } from \"../../../hooks/useToken\";\nimport { useSnackBars } from \"../../../hooks/useSnackbars\";\nimport { useNavigate } from \"react-router-dom\";\nimport BulkDownloadArtifactForm from \"./BulkDownloadArtifactForm\";\nimport DownloadArtifactButton from \"../../ArtifactDetails/components/DownloadArtifactButton\";\n\nconst RequestDetails = () => {\n  const { selectedArtifacts, setEmptyList,removeById } = useSelection();\n  const { token } = useToken();\n  const loggedIn = !!token;\n  const { addAlert } = useSnackBars();\n  const navigate = useNavigate();\n\n  const handleDownload = async () => {\n    try {\n      const response = await fetch(\n        `${API_URLS.DETAILED_ARTIFACT}/bulkdownloading`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify({\n            authenticated: true,\n            artifacts: selectedArtifacts.map((artifact) => artifact.id),\n          }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        addAlert(data.detail);\n        return;\n      }\n\n      if (data.bulk_request_id) {\n        console.log(data.bulk_request_id);\n      }\n\n      const downloadResponse = await fetch(\n        `${API_URLS.DETAILED_ARTIFACT}/${data.bulk_request_id}/bulkdownloading`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      const url = window.URL.createObjectURL(\n        new Blob([await downloadResponse.blob()])\n      );\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `bulk_artifacts.zip`;\n      link.click();\n      link.remove();\n      addAlert(\"Descarga exitosa\");\n    } catch (error) {\n      addAlert(\"Error al descargar pieza\");\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        padding: 2,\n        width: 300,\n        borderLeft: \"1px solid #ddd\",\n        display: 'flex',\n        flexDirection: 'column',\n        maxHeight: '80vh',\n        overflowy: 'auto',\n      }}\n    >\n      <Typography variant=\"h6\" gutterBottom>\n        Detalle de la Solicitud\n      </Typography>\n\n      {selectedArtifacts.length > 0 ? (\n        <List sx={{ flexGrow: 1, overflowY: 'auto', maxHeight: '60vh', marginBottom: 2 }}>\n          {selectedArtifacts.map((artifact) => (\n            <React.Fragment key={artifact.id}>\n            <ListItem>\n              <Typography variant=\"body1\" sx={{ marginRight: 1 }}>Pieza {artifact.id}</Typography>\n\n              <IconContainer>\n                <img src='/eye.svg' alt=\"Icono 1\" width={16} height={16} style={{ marginRight: 4 }} onClick={() => navigate(`/catalog/${artifact.id}`)}/>\n                <img src='./delete.svg' alt=\"Icono 2\" width={16} height={16} onClick={() => removeById(artifact.id)}  />\n              </IconContainer>\n            </ListItem>\n            <Divider />\n          </React.Fragment>\n          ))}\n        </List>\n      ) : (\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ flexGrow: 1, paddingBottom: 2 }}>\n          No hay elementos seleccionados.\n        </Typography>\n      )}\n      {selectedArtifacts.length > 0 && (\n        <Container sx={{ paddingBottom: 2 }}>\n          {loggedIn ? (\n            <HorizontalStack>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={handleDownload}\n              >\n                Descargar Piezas\n              </Button>\n            </HorizontalStack>\n          ) : (\n            <HorizontalStack>\n              <DownloadArtifactButton fullWidth text=\"Solicitar Artefactos\">\n                <BulkDownloadArtifactForm artifactInfoList={selectedArtifacts}></BulkDownloadArtifactForm>\n              </DownloadArtifactButton>\n            </HorizontalStack>\n          )}\n\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            fullWidth\n            onClick={setEmptyList}\n            sx={{ marginTop: 1 }}\n          >\n            Deshacer Solicitud\n          </Button>\n        </Container>\n      )}\n    </Box>\n  );\n};\n\nconst HorizontalStack = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  gap: theme.spacing(1),\n}));\n\nconst IconContainer = styled(\"div\")({\n  display: \"flex\",\n  gap: 8,\n  marginLeft: \"auto\",\n  img: {\n    cursor: \"pointer\",\n    padding: 4, // Agregamos un poco de espacio para hacerlo clickeable\n    borderRadius: \"50%\", // Opcional: puedes cambiar el diseño\n    transition: \"background-color 0.3s, transform 0.3s\", // Efecto de transición suave\n  },\n  \n  \"img:hover\": {\n    backgroundColor: \"#f0f0f0\", // Color de fondo claro al pasar el mouse\n    transform: \"scale(1.2)\", // Hace un zoom ligero\n  },\n});\n\n\nexport default RequestDetails;\n","import React, { useState } from \"react\";\n\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Typography,\n  Skeleton,\n  IconButton,\n} from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport ArtifactCard from \"./components/ArtifactCard\";\nimport CatalogPagination from \"./components/CatalogPagination\";\nimport CatalogFilter from \"./components/CatalogFilter\";\nimport { API_URLS } from \"../../api\";\nimport { useToken } from \"../../hooks/useToken\";\nimport useFetchItems from \"../../hooks/useFetchItems\";\nimport {useSelection} from \"../../selectionContext\";\nimport RequestDetails from \"./components/requestDetails\"; \nimport CloseIcon from '@mui/icons-material/Close'\n\n/**\n * The Catalog component displays a catalog of artifacts with pagination and filtering options.\n * Users can view artifact cards, apply filters, and navigate through paginated results.\n * @returns {JSX.Element} Component for displaying the catalog.\n */\nconst Catalog = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { token } = useToken();\n  const loggedIn = !!token;\n\n  // implement \"selecion mode\" and a select artifact list to download many artifacts \n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n  const { selectedArtifacts, toggleSelection } = useSelection();\n  // to manage the state of the download request details \n  const [isDetailsOpen,setDetailsOpen] = useState(false);\n\n  //function to set the selection mode \n  const changeSelectionMode = () =>{\n    console.log(isSelectionMode)\n    if(isSelectionMode===true && isDetailsOpen===true){\n      changeDetailsOpen();\n    }\n    setIsSelectionMode(!isSelectionMode)\n  }\n  const changeDetailsOpen = () =>{\n    setDetailsOpen(!isDetailsOpen)\n  }\n // Custom hook to fetch items (artifacts) from the API with pagination and filtering\n  const {\n    items: artifactList,\n    loading,\n    filter,\n    setFilter,\n    pagination,\n    setPagination,\n    options\n  } = useFetchItems(API_URLS.ALL_ARTIFACTS);\n  \n  /**\n   * Handles redirection to the add artifact page.\n   */\n  const handleRedirect = () => {\n    navigate(\"/catalog/new\", { state: { from: location } });\n  };\n\n  const handleButtonSelectionMode = () => {\n    //if not selectionMode \n    if(!isSelectionMode){\n    changeSelectionMode();\n    changeDetailsOpen();}else{\n      changeSelectionMode();\n    }\n\n  };\n  return (\n    <Container>\n      {/* Title of the catalog */}\n      <CustomTypography variant=\"h1\">Catálogo</CustomTypography>\n      {/* Component for filtering artifacts */}\n      <CatalogFilter filter={filter} setFilter={setFilter} options = {options} />\n        <CustomButtonBox>\n          {/* Button to add new artifact (visible to logged-in users) */}\n          {loggedIn && (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              onClick={handleRedirect}\n            >\n              Agregar pieza\n            </Button>\n            )}\n          {/* Button to change selection mode */}\n          <Button variant={isSelectionMode ? \"contained\" : \"outlined\"} color=\"secondary\" size=\"large\" onClick={handleButtonSelectionMode}>\n          {isSelectionMode ? \"Desactivar Modo Selección\" : \"Seleccionar Artefactos Para Descargar\"}\n          </Button>\n          {isSelectionMode && <Button variant=\"outlined\" color=\"secondary\" size=\"large\" onClick={changeDetailsOpen}>\n            Ver Artefactos Seleccionados\n          </Button>}\n        </CustomButtonBox>\n       {/* Loading state display with skeleton cards */}\n      {loading ? (\n        <Box>\n          <Grid container spacing={2}>\n            {Array.from({ length: 9 }, (_, index) => (\n              <Grid item xs={12} sm={6} md={4} key={index}>\n                <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n         // Displaying artifact cards if available\n      ) : artifactList.length > 0 ? (\n        <Box>\n          <Grid container spacing={2}>\n            {artifactList.map((artifact) => (\n              <Grid item xs={12} sm={6} md={4} key={artifact.id}>\n                <ArtifactCard \n                artifact={artifact}\n                isSelectionMode={isSelectionMode}\n                onSelectArtifact={toggleSelection}\n                selected={selectedArtifacts.some(selected => selected.id === artifact.id)}\n                />\n              </Grid>\n            ))}\n          </Grid>\n{/* Pagination component */}\n          <CatalogPagination\n            pagination={pagination}\n            setPagination={setPagination}\n          />\n        </Box>\n      ) : (\n        <CustomBox>\n          <Typography variant=\"p\" align=\"center\">\n            No se encontraron resultados\n          </Typography>\n        </CustomBox>\n      )}\n\n      {/* download request */}\n      \n      <RequestDetailsPanel open={isDetailsOpen}>\n        <IconButton onClick={()=> setDetailsOpen(false)} sx={{ position: 'absolute', top: 8, right: 8 }}>\n          <CloseIcon />\n        </IconButton>\n        <RequestDetails></RequestDetails>\n      </RequestDetailsPanel> \n    </Container>\n  );\n};\n\n// Custom styled typography for the catalog title\nconst CustomTypography = styled(Typography)(({ theme }) => ({\n  marginTop: theme.spacing(12),\n  marginBottom: theme.spacing(3),\n  textAlign: \"center\",\n}));\n\n// Custom styled box for centering content\nconst CustomBox = styled(Grid)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  gap: theme.spacing(2),\n  marginBottom: theme.spacing(3),\n}));\n\n// Styled Box component for containing the button\nconst CustomButtonBox = styled(Box)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  gap: theme.spacing(2),\n  marginBottom: theme.spacing(3),\n}));\n\n//Custom the request details information \nconst RequestDetailsPanel = styled(Box)(({ theme, open }) => ({\n  position: \"fixed\",\n  top: 0,\n  right: 0,\n  height: \"100%\",\n  width: \"300px\",\n  backgroundColor: theme.palette.background.paper,\n  boxShadow: theme.shadows[5],\n  padding: theme.spacing(2),\n  transform: open ? \"translateX(0)\" : \"translateX(100%)\",\n  transition: \"transform 0.3s ease\",\n  zIndex: 1300,\n}));\nexport default Catalog;\n"],"names":["CustomCardMedia","styled","CardMedia","_ref2","theme","cursor","EllipsisBox","Box","_ref3","width","overflow","textOverflow","whiteSpace","CustomCardContent","CardContent","_ref4","display","flexDirection","alignItems","rowGap","MetadataContainer","_ref5","flexWrap","gap","spacing","CustomShapeTag","Chip","_ref6","backgroundColor","palette","tags","shape","fontSize","height","paddingLeft","paddingRight","CustomCultureTag","_ref7","culture","_ref","artifact","isSelectionMode","onSelectArtifact","selected","navigate","useNavigate","id","attributes","thumbnail","previewPath","description","flattenTags","map","tag","value","join","slicedTags","slice","concat","length","handleRedirect","_jsxs","Card","sx","position","border","children","_jsx","Checkbox","top","left","color","checked","onClick","e","stopPropagation","CheckCircle","component","image","alt","style","objectFit","label","size","icon","Category","Diversity3","Typography","variant","Tooltip","arrow","title","pagination","setPagination","currentPage","totalPages","searchParams","setSearchParams","useSearchParams","updateParamsFlag","setUpdateParamsFlag","useState","useEffect","page","get","parseInt","decodeURIComponent","set","justifyContent","p","Pagination","count","onChange","handlePageChange","_","CustomBox","Grid","marginBottom","CustomStack","Stack","columnGap","filter","setFilter","options","addAlert","useSnackBars","token","useToken","loading","setLoading","errors","setErrors","shapeOptions","setShapeOptions","cultureOptions","setCultureOptions","tagOptions","setTagOptions","handleFilterChange","name","query","tagsArray","split","fetch","API_URLS","ALL_METADATA","headers","Authorization","then","response","ok","Error","detail","json","metadata","data","shapesNames","shapes","culturesNames","cultures","tagsNames","catch","error","finally","delete","console","log","Object","keys","constructor","TextField","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","onMouseDown","event","preventDefault","edge","Clear","fullWidth","target","direction","Autocomplete","textContent","getOptionLabel","option","noOptionsText","filterSelectedOptions","renderInput","params","placeholder","disabled","multiple","limitTags","baseUrl","setOptions","total","perPage","items","setItems","timeoutId","setTimeout","url","URL","window","location","origin","forEach","key","append","current_page","per_page","total_pages","filters","message","clearTimeout","CustomTypography","marginTop","maxHeight","overflowY","margin","CustomButton","Button","OptionBox","padding","validateRut","rutStr","normalizedRut","replace","toUpperCase","rutBody","rutDv","test","factor","i","calculatedDv","toString","artifactInfoList","handleClose","institutions","setInstitutions","formValues","setFormValues","fullName","rut","email","repeatEmail","institution","comments","rutError","setRutError","emailMatchError","setEmailMatchError","ALL_INSTITUTIONS","Array","from","checkEmailsMatch","fieldName","Paper","autoComplete","onSubmit","async","body","artifacts","authenticated","DETAILED_ARTIFACT","method","JSON","stringify","handleDownloadRequest","maxWidth","InputLabel","required","helperText","type","_option$value","multiline","CustomModal","Modal","paddingTop","text","open","setOpen","handleOpen","onClose","React","HorizontalStack","IconContainer","marginLeft","img","borderRadius","transition","transform","RequestDetails","selectedArtifacts","setEmptyList","removeById","useSelection","loggedIn","borderLeft","overflowy","gutterBottom","List","flexGrow","ListItem","marginRight","src","Divider","paddingBottom","Container","bulk_request_id","downloadResponse","createObjectURL","Blob","blob","link","document","createElement","href","download","click","remove","DownloadArtifactButton","BulkDownloadArtifactForm","textAlign","CustomButtonBox","RequestDetailsPanel","right","background","paper","boxShadow","shadows","zIndex","Catalog","useLocation","setIsSelectionMode","toggleSelection","isDetailsOpen","setDetailsOpen","changeSelectionMode","changeDetailsOpen","artifactList","useFetchItems","ALL_ARTIFACTS","CatalogFilter","state","handleButtonSelectionMode","container","index","item","xs","sm","md","Skeleton","ArtifactCard","some","CatalogPagination","align","CloseIcon"],"sourceRoot":""}