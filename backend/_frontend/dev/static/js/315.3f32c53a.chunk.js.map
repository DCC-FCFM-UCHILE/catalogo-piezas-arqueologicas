{"version":3,"file":"static/js/315.3f32c53a.chunk.js","mappings":"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","sources":["pages/ArtifactDetails/components/ModelVisualization.jsx","pages/ArtifactDetails/components/ImageVisualization.jsx","pages/ArtifactDetails/components/Carousel.jsx","pages/ArtifactDetails/ArtifactDetails.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { Canvas, useLoader } from \"@react-three/fiber\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport { MTLLoader } from \"three/examples/jsm/loaders/MTLLoader\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { styled } from \"@mui/material/styles\";\nimport { Tooltip, IconButton } from \"@mui/material\";\nimport CachedIcon from \"@mui/icons-material/Cached\";\nimport FullscreenIcon from \"@mui/icons-material/Fullscreen\";\nimport QuestionMarkIcon from \"@mui/icons-material/QuestionMark\";\nimport ZoomInIcon from \"@mui/icons-material/ZoomIn\";\nimport OpenWithIcon from \"@mui/icons-material/OpenWith\";\nimport FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\nimport ZoomOutIcon from \"@mui/icons-material/ZoomOut\";\nimport * as THREE from \"three\";\n\n/**\n * ModelVisualization component displays a 3D model using Three.js within a React Three Fiber Canvas.\n * It supports loading OBJ and MTL files, controlling camera, zooming, fullscreen mode, and tooltips.\n * @param {Object} props - Component props.\n * @param {string} props.objPath - Path to the OBJ model file.\n * @param {string} props.mtlPath - Path to the MTL material file for the OBJ model.\n * @returns {JSX.Element} Component for visualizing a 3D model with interactive controls.\n */\nconst ModelVisualization = ({ objPath, mtlPath }) => {\n  const material = useLoader(MTLLoader, mtlPath); // Load MTL material\n  material.side = THREE.DoubleSide; // Ensure material is double-sided\n\n  // Load OBJ model and set materials\n  const object = useLoader(OBJLoader, objPath, (loader) => {\n    material.preload();\n    loader.setMaterials(material);\n  });\n\n  const canvasRef = useRef(null); // Reference to the Canvas element\n  const cameraControlsRef = useRef(null); // Reference to OrbitControls for camera manipulation\n  const [isFullscreen, setIsFullscreen] = useState(false); // State for fullscreen mode\n\n  useEffect(() => {\n    // Event listener to detect fullscreen changes\n    function handleFullscreenChange() {\n      setIsFullscreen(document.fullscreenElement !== null);\n    }\n    document.addEventListener(\"fullscreenchange\", handleFullscreenChange);\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleFullscreenChange);\n    };\n  }, []);\n\n  // Function to request fullscreen mode\n  const handleFullscreenClick = () => {\n    canvasRef.current.requestFullscreen();\n  };\n\n  // Function to exit fullscreen mode\n  const handleExitFullscreenClick = () => {\n    document.exitFullscreen();\n  };\n\n  // Function to zoom in on the model\n  const handleZoomIn = () => {\n    const currentPosition = cameraControlsRef.current.object.position;\n    const zoomFactor = 0.9;\n    const newX = currentPosition.x * zoomFactor;\n    const newY = currentPosition.y * zoomFactor;\n    const newZ = currentPosition.z * zoomFactor;\n    cameraControlsRef.current.object.position.set(newX, newY, newZ);\n    cameraControlsRef.current.update();\n  };\n\n  // Function to zoom out from the model\n  const handleZoomOut = () => {\n    const currentPosition = cameraControlsRef.current.object.position;\n    const zoomFactor = 1.1;\n    const newX = currentPosition.x * zoomFactor;\n    const newY = currentPosition.y * zoomFactor;\n    const newZ = currentPosition.z * zoomFactor;\n    cameraControlsRef.current.object.position.set(newX, newY, newZ);\n    cameraControlsRef.current.update();\n  };\n\n  return (\n    <CustomDiv ref={canvasRef} id=\"canvas-container\">\n      {/* Three.js Canvas for rendering the 3D model */}\n      <CustomCanvas camera={{ fov: 25, position: [0, 0, -500] }}>\n        <ambientLight intensity={4} /> {/* Ambient light for the scene */}\n        <primitive position={[0, 0, 0]} object={object} /> {/* OBJ model */}\n        <OrbitControls ref={cameraControlsRef} /> {/* OrbitControls for camera */}\n      </CustomCanvas>\n      \n      {/* Container for control buttons */}\n      <CustomContainer>\n        {isFullscreen ? (\n          // Button to exit fullscreen mode\n          <Tooltip\n            title=\"Pantalla normal\"\n            arrow\n            PopperProps={{ container: canvasRef.current }}\n            placement=\"bottom-start\"\n          >\n            <CustomIconButton onClick={handleExitFullscreenClick}>\n              <FullscreenExitIcon />\n            </CustomIconButton>\n          </Tooltip>\n        ) : (\n          // Button to enter fullscreen mode\n          <Tooltip\n            title=\"Pantalla completa\"\n            arrow\n            PopperProps={{ container: canvasRef.current }}\n            placement=\"bottom-start\"\n          >\n            <CustomIconButton onClick={handleFullscreenClick}>\n              <FullscreenIcon />\n            </CustomIconButton>\n          </Tooltip>\n        )}\n        \n        {/* Tooltip for help information */}\n        <Tooltip\n          placement=\"bottom-start\"\n          title={\n            <>\n              <h3>Ayuda:</h3>\n              <p><CachedIcon /> Orbitar: Click izquierdo</p>\n              <p><ZoomInIcon /> Zoom: scroll o rueda</p>\n              <p><OpenWithIcon /> Arrastrar: Click derecho</p>\n            </>\n          }\n          arrow\n          PopperProps={{ container: canvasRef.current }}\n        >\n          <CustomIconButton>\n            <QuestionMarkIcon />\n          </CustomIconButton>\n        </Tooltip>\n        \n        {/* Button to zoom in */}\n        <Tooltip\n          title=\"Ampliar Zoom\"\n          arrow\n          PopperProps={{ container: canvasRef.current }}\n        >\n          <CustomIconButton onClick={handleZoomIn}>\n            <ZoomInIcon />\n          </CustomIconButton>\n        </Tooltip>\n        \n        {/* Button to zoom out */}\n        <Tooltip\n          title=\"Alejar Zoom\"\n          arrow\n          PopperProps={{ container: canvasRef.current }}\n        >\n          <CustomIconButton onClick={handleZoomOut}>\n            <ZoomOutIcon />\n          </CustomIconButton>\n        </Tooltip>\n      </CustomContainer>\n    </CustomDiv>\n  );\n};\n\n// Styled components for customizing the Canvas and IconButton\nconst CustomCanvas = styled(Canvas)({\n  backgroundColor: \"#2e2d2c\",\n});\n\nconst CustomDiv = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  height: theme.spacing(75),\n  position: \"relative\",\n}));\n\nconst CustomIconButton = styled(IconButton)({\n  color: \"white\",\n});\n\nconst CustomContainer = styled(\"div\")(({ theme }) => ({\n  backgroundColor: \"transparent\",\n  height: \"50px\",\n  position: \"absolute\",\n  width: \"100%\",\n  maxWidth: \"100%\",\n  boxSizing: \"border-box\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  paddingLeft: \"2%\",\n  paddingRight: \"2%\",\n  paddingTop: \"1%\",\n  justifyContent: \"flex-start\",\n  top: 0,\n}));\n\nexport default ModelVisualization;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FullscreenIcon from \"@mui/icons-material/Fullscreen\";\nimport FullscreenExitIcon from \"@mui/icons-material/FullscreenExit\";\nimport { styled } from \"@mui/material/styles\";\n\n\n/**\n * ImageVisualization component displays an image with fullscreen option.\n * @param {string} props.imagePath - Path to the image to be displayed.\n * @returns {JSX.Element} Component for displaying an image with fullscreen option.\n */\nconst ImageVisualization = ({ imagePath }) => {\n    const containerRef = useRef(null);\n    const [isFullscreen, setIsFullscreen] = useState(false);\n    \n    // Event listener to detect fullscreen changes\n    useEffect(() => {\n        function handleFullscreenChange() {\n        setIsFullscreen(document.fullscreenElement !== null);\n        }\n        document.addEventListener(\"fullscreenchange\", handleFullscreenChange);\n        return () => {\n        document.removeEventListener(\"fullscreenchange\", handleFullscreenChange);\n        };\n    }, []);\n\n    // Function to request fullscreen mode\n    const handleFullscreenClick = () => {\n        containerRef.current.requestFullscreen();\n    };\n    // Function to exit fullscreen mode\n    const handleExitFullscreenClick = () => {\n        document.exitFullscreen();\n    };\n    \n    return (\n        <CustomDiv ref={containerRef}>\n        {/* Image to be displayed */}\n        <CustomImg src={imagePath} alt=\"Artifact\" />\n        <div>\n            {/* Fullscreen buttons */}\n            {isFullscreen ? (\n                <CustomIconButton onClick={handleExitFullscreenClick}>\n                    <FullscreenExitIcon />\n                </CustomIconButton>\n            ) : (\n                <CustomIconButton onClick={handleFullscreenClick}>\n                    <FullscreenIcon />\n                </CustomIconButton>\n            )}\n        </div>\n        </CustomDiv>\n    );\n}\n\n// Styled components for custom styling\nconst CustomDiv = styled(\"div\")(({ theme }) => ({\n    width: \"100%\",\n    height: theme.spacing(75),\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"black\",\n    overflow: \"hidden\",\n}));\n\nconst CustomImg = styled(\"img\")(() => ({\n    width: \"100%\",\n    height: \"100%\",\n    objectFit: \"contain\",\n}));\n\nconst CustomIconButton = styled(IconButton)({\n    color: \"white\",\n    position: \"absolute\",\n    zIndex: 1,\n    top: 10,\n    right: 10,\n});\n\nexport default ImageVisualization;","import React, { useEffect } from \"react\";\nimport styled from \"@mui/material/styles/styled\";\n\n/**\n * Carousel component displays a carousel of images with a thumbnail for a 3D model.\n * Each image can be clicked to view in a larger size using the selectVisualization function.\n * @param {Object} props - Component props.\n * @param {string[]} props.images - Array of image paths to be displayed.\n * @param {string} props.thumbnail - Path to the thumbnail image for the 3D model.\n * @param {boolean} props.modelExists - Boolean indicating if a 3D model exists.\n * @param {Function} props.selectVisualization - Function to select a visualization.\n * @returns {JSX.Element|null} Component for displaying a carousel of images.\n */\nconst Carousel = ({images, thumbnail, modelExists, selectVisualization}) => {\n    const [length, setLength] = React.useState(images.length);\n\n    // Update the length of the carousel based on the number of images and if the model exists\n    useEffect(() => {\n        modelExists ? setLength(images.length + 1) : setLength(images.length);\n    }, [images, modelExists]);\n\n    return (\n        length > 1 && (\n            <CustomBox>\n                <CustomImageList>\n                    {/* Display the thumbnail image for the 3D model */}\n                    {modelExists && (\n                        <CustomImageListItem>\n                            <CustomImage src={thumbnail} alt=\"Artifact\" onClick={() => selectVisualization(-1)} />\n                        </CustomImageListItem>\n                    )}\n                    {/* Maps through the images array to display each image */}\n                    {images.map((item, index) => (\n                        <CustomImageListItem key={index}>\n                            <CustomImage src={item} alt=\"Artifact\" onClick={() => selectVisualization(index)} />\n                        </CustomImageListItem>\n                    ))}\n                </CustomImageList>\n            </CustomBox>\n        )\n    );\n};\n\n// Styled components for custom styling\nconst CustomImageList = styled(\"div\")(({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: theme.spacing(0.5),\n}));\n\nconst CustomBox = styled(\"div\")(({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    width: theme.spacing(45.2),\n    position: \"relative\",\n}));\n\nconst CustomImageListItem = styled(\"div\")(({ theme }) => ({\n    display: \"flex\",\n    width: theme.spacing(12.5),\n    height: theme.spacing(12.5),\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1.25),\n    backgroundColor: \"#bdbdbd\",\n    justifyContent: \"center\",\n}));\n\nconst CustomImage = styled(\"img\")(() => ({\n    cursor: \"pointer\",\n    width: \"100%\",\n    height: \"100%\",\n    objectFit: \"cover\",\n}));\n\nexport default Carousel;","import React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Button,\n  Chip,\n  Skeleton,\n  CircularProgress,\n} from \"@mui/material\";\nimport { Category, Diversity3, LocalOffer } from \"@mui/icons-material\";\nimport { styled } from \"@mui/material/styles\";\nimport ModelVisualization from \"./components/ModelVisualization\";\nimport ImageVisualization from \"./components/ImageVisualization\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport NotFound from \"../../components/NotFound\";\nimport { API_URLS } from \"../../api\";\nimport { useToken } from \"../../hooks/useToken\";\nimport { useSnackBars } from \"../../hooks/useSnackbars\";\nimport Carousel from \"./components/Carousel\";\nimport { useSelection } from \"../../selectionContext\";\n\n/**\n * The ArtifactDetails component displays detailed information about a specific artifact,\n * including its model, images, attributes, and provides options for download and editing.\n * It handles data fetching, state management, and conditional rendering based on user authentication.\n * @returns {JSX.Element} Component for displaying artifact details.\n */\nconst ArtifactDetails = () => {\n  const navigate = useNavigate();\n  const { selectedArtifacts, toggleSelection, removeById } = useSelection();\n  const [isArtifactSelected, setIsArtifactSelected] = useState(false);\n  const location = useLocation();\n  const { token } = useToken();\n  const { addAlert } = useSnackBars();\n  const loggedIn = !!token;\n  const { artifactId } = useParams();\n  const [notFound, setNotFound] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [artifact, setArtifact] = useState({\n    attributes: {\n      culture: { id: \"\", value: \"\" },\n      shape: { id: \"\", value: \"\" },\n      tags: [],\n      description: \"\",\n    },\n    thumbnail: \"\",\n    model: {\n      object: \"\",\n      material: \"\",\n      texture: \"\",\n    },\n    images: [],\n  });\n  const [selectedVisualization, setSelectedVisualization] = useState({\n    type: \"\",\n    index: 0,\n  })\n\n  /**\n   * Redirects the user to the edit page of the current artifact.\n   */\n  const handleRedirect = () => {\n    navigate(`/catalog/${artifactId}/edit`, {\n      state: { from: location },\n    });\n  };\n\n  useEffect(() => {\n    /**\n     * Fetches detailed information about the artifact from the API.\n     * Sets the artifact state if successful; sets notFound state if artifact not found.\n     */\n    fetch(`${API_URLS.DETAILED_ARTIFACT}/${artifactId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          if (response.status === 404) {\n            setNotFound(true);\n            return;\n          }\n        }\n        return response.json();\n      })\n      .then((response) => {\n        setArtifact(response);\n        if (response.model.object !== \"\") {\n          setSelectedVisualization({\n            type: \"model\",\n            index: -1\n          })\n          console.log(\"model visualization\")\n        } else {\n          setSelectedVisualization({\n            type: \"image\",\n            index: 0\n          })\n          console.log(\"image visualization\")\n        }\n      })\n      .finally(() =>{\n        setLoading(false)\n        const artifactSelectedStatus = selectedArtifacts.some((a) => a.id == artifactId)\n        setIsArtifactSelected(artifactSelectedStatus)\n        console.log(\"status: \" + artifactSelectedStatus)\n      });\n  }, [artifactId, token]);\n\n  /**\n   * Handles the download click \n   * update the artifact in useSelection\n   */\n  const handleClick = async () => {\n    if (isArtifactSelected){\n      console.log(\"eliminar artefacto\")\n      removeById(parseInt(artifactId))\n      setIsArtifactSelected(false)\n    } else{\n      console.log(\"añadir artefacto\")\n      toggleSelection({\n        id: parseInt(artifactId, 10),\n        attributes: artifact.attributes,\n        thumbnail: artifact.thumbnail\n      })\n      setIsArtifactSelected(true)\n  }};\n\n\n  const handleVisualization = (index) => {\n    if (index === -1) {\n      setSelectedVisualization({\n        type: \"model\",\n        index: -1\n      })\n    } else {\n      setSelectedVisualization({\n        type: \"image\",\n        index: index\n      })\n    }\n  }\n\n  return (\n    <>\n      {notFound ? (\n        // Renders a NotFound component if the artifact is not found\n        <NotFound />\n      ) : (\n        // Renders artifact details if found\n        <ContainerGrid>\n          {/* LeftBox: Contains artifact title, download/edit buttons, model visualization, and image carousel */}\n          <LeftBox>\n            <CustomContainer>\n              {/* Artifact title */}\n              <Typography variant=\"h4\">\n                <b>Pieza {artifact.id}</b>\n              </Typography>\n              {/* Conditional rendering based on user authentication */}\n              {loggedIn ? (\n                // Buttons for download and edit (if logged in)\n                <HorizontalStack>\n                  <Button variant=\"contained\" onClick={handleClick}>\n                    {isArtifactSelected ?\n                    <>  Deseleccionar Pieza para descarga </>\n                      :\n                    <> Seleccionar Pieza para descarga </>}\n                  </Button>\n                  <Button variant=\"contained\" onClick={handleRedirect}>\n                    Editar Pieza\n                  </Button>\n                </HorizontalStack>\n              ) : (\n                // Button to request data if not logged in\n                <Button variant=\"contained\" onClick={handleClick}>\n                    {isArtifactSelected ?\n                    <>  Deseleccionar Pieza para descarga </>\n                      :\n                    <> Seleccionar Pieza para descarga </>}\n                </Button>\n              )}\n            </CustomContainer>\n            {/* Loading indicator while model is being loaded */}\n            {loading ? (\n              <CustomDiv>\n                <CircularProgress color=\"primary\" />\n              </CustomDiv>\n            ) : (\n              <>\n              {selectedVisualization.type === \"image\" ? (\n                <ImageVisualization imagePath={artifact.images[selectedVisualization.index]} />\n              ) : (\n              // Renders 3D model visualization if object and material paths are available\n              <ModelVisualization\n                objPath={artifact.model.object}\n                mtlPath={artifact.model.material}\n              />\n              )}\n              </>\n            )}\n            {/* Image carousel for displaying artifact images */}\n            <Carousel images={artifact.images} thumbnail={artifact.thumbnail} modelExists={!!artifact.model.object} selectVisualization={handleVisualization} />\n          </LeftBox>\n          {/* RightBox: Contains artifact description, tags, and attributes */}\n          <RightBox>\n            {/* Displays artifact description or loading skeleton */}\n            <Typography>\n              {loading ? (\n                <CustomSkeletonText />\n              ) : (\n                artifact.attributes.description\n              )}\n            </Typography>\n            {/* Displays artifact shape tag */}\n            <HorizontalStack>\n              <Typography variant=\"h5\">\n                <Category color=\"inherit\" fontSize=\"small\" style={{ verticalAlign: 'middle' }} /> Forma:{\" \"}\n              </Typography>\n              {loading ? (\n                <CustomSkeletonTag />\n              ) : (\n                <CustomShapeTag label={artifact.attributes.shape.value} />\n              )}\n            </HorizontalStack>\n            {/* Displays artifact culture tag */}\n            <HorizontalStack>\n              <Typography variant=\"h5\">\n                {\" \"}\n                <Diversity3 color=\"inherit\" fontSize=\"small\" style={{ verticalAlign: 'middle' }} /> Cultura:\n              </Typography>\n              {loading ? (\n                <CustomSkeletonTag />\n              ) : (\n                <CustomCultureTag label={artifact.attributes.culture.value} />\n              )}\n            </HorizontalStack>\n            {/* Displays artifact tags */}\n            <VerticalStack>\n              <Typography variant=\"h5\">\n                <LocalOffer color=\"inherit\" fontSize=\"small\" style={{ verticalAlign: 'middle' }} /> Etiquetas:\n              </Typography>\n              <TagContainer>\n                {loading ? (\n                  <CustomSkeletonTag />\n                ) : artifact.attributes.tags.length > 0 ? (\n                  artifact.attributes.tags.map((tag) => (\n                    <Chip key={tag.id} label={tag.value} />\n                  ))\n                ) : (\n                  <p>Sin etiquetas</p>\n                )}\n              </TagContainer>\n            </VerticalStack>\n          </RightBox>\n        </ContainerGrid>\n      )}\n    </>\n  );\n};\n\n// Styled components for customizing UI elements\nconst CustomContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  width: \"100%\",\n  height: theme.spacing(5.25),\n}));\n\nconst HorizontalStack = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  gap: theme.spacing(1),\n}));\n\nconst VerticalStack = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: theme.spacing(1),\n}));\n\nconst LeftBox = styled(\"div\")(({ theme }) => ({\n  width: theme.spacing(83),\n  [theme.breakpoints.up(\"md\")]: {\n    width: theme.spacing(106.5),\n  },\n  [theme.breakpoints.up(\"xl\")]: {\n    width: theme.spacing(140),\n  },\n  [theme.breakpoints.up(\"xxl\")]: {\n    width: theme.spacing(175.5),\n  },\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"flex-start\",\n  gap: theme.spacing(1),\n}));\n\nconst RightBox = styled(\"div\")(({ theme }) => ({\n  padding: theme.spacing(1),\n  paddingTop: theme.spacing(3),\n  paddingBottom: theme.spacing(3),\n  backgroundColor: \"#fff\",\n  [theme.breakpoints.down(\"md\")]: {\n    width: theme.spacing(83),\n    minWidth: theme.spacing(83),\n  },\n  [theme.breakpoints.up(\"md\")]: {\n    width: theme.spacing(104.5),\n  },\n  [theme.breakpoints.up(\"lg\")]: {\n    marginTop: theme.spacing(6.25),\n    width: theme.spacing(28),\n    height: theme.spacing(69),\n    gap: theme.spacing(1.7),\n  },\n  [theme.breakpoints.up(\"xl\")]: {\n    width: theme.spacing(34.25),\n  },\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: theme.spacing(3),\n}));\n\nconst ContainerGrid = styled(\"div\")(({ theme }) => ({\n  marginTop: theme.spacing(3),\n  paddingBottom: theme.spacing(3),\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexWrap: \"wrap\",\n  paddingRight: theme.spacing(5),\n  paddingLeft: theme.spacing(5),\n  gap: theme.spacing(1),\n  [theme.breakpoints.up(\"lg\")]: {\n    gap: theme.spacing(3),\n  },\n}));\n\nconst TagContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  flexDirection: \"row\",\n  width: \"100%\",\n  gap: theme.spacing(1),\n}));\n\nconst CustomShapeTag = styled(Chip)(({ theme }) => ({\n  backgroundColor: theme.palette.tags.shape,\n}));\n\nconst CustomCultureTag = styled(Chip)(({ theme }) => ({\n  backgroundColor: theme.palette.tags.culture,\n}));\n\nconst CustomSkeletonTag = styled(Skeleton)(({ theme }) => ({\n  width: theme.spacing(13),\n  height: theme.spacing(8),\n  variant: \"rounded\",\n}));\n\nconst CustomSkeletonText = styled(Skeleton)(({ theme }) => ({\n  width: theme.spacing(28),\n  height: theme.spacing(10),\n  variant: \"text\",\n}));\n\nconst CustomDiv = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  height: theme.spacing(75),\n  backgroundColor: \"#2e2d2c\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n}));\n\nexport default ArtifactDetails;\n\n"],"names":["CustomCanvas","styled","Canvas","backgroundColor","CustomDiv","_ref2","theme","width","height","spacing","position","CustomIconButton","IconButton","color","CustomContainer","_ref3","maxWidth","boxSizing","display","flexDirection","paddingLeft","paddingRight","paddingTop","justifyContent","top","_ref","objPath","mtlPath","material","useLoader","MTLLoader","side","THREE","object","OBJLoader","loader","preload","setMaterials","canvasRef","useRef","cameraControlsRef","isFullscreen","setIsFullscreen","useState","useEffect","handleFullscreenChange","document","fullscreenElement","addEventListener","removeEventListener","_jsxs","ref","id","children","camera","fov","_jsx","intensity","OrbitControls","Tooltip","title","arrow","PopperProps","container","current","placement","onClick","handleExitFullscreenClick","exitFullscreen","FullscreenExitIcon","handleFullscreenClick","requestFullscreen","FullscreenIcon","_Fragment","CachedIcon","ZoomInIcon","OpenWithIcon","QuestionMarkIcon","handleZoomIn","currentPosition","newX","x","newY","y","newZ","z","set","update","handleZoomOut","ZoomOutIcon","alignItems","overflow","CustomImg","objectFit","zIndex","right","imagePath","containerRef","src","alt","CustomImageList","gap","CustomBox","CustomImageListItem","_ref4","padding","borderRadius","CustomImage","cursor","images","thumbnail","modelExists","selectVisualization","length","setLength","React","map","item","index","HorizontalStack","VerticalStack","LeftBox","breakpoints","up","RightBox","_ref5","paddingBottom","down","minWidth","marginTop","ContainerGrid","_ref6","flexWrap","TagContainer","_ref7","CustomShapeTag","Chip","_ref8","palette","tags","shape","CustomCultureTag","_ref9","culture","CustomSkeletonTag","Skeleton","_ref10","variant","CustomSkeletonText","_ref11","_ref12","ArtifactDetails","navigate","useNavigate","selectedArtifacts","toggleSelection","removeById","useSelection","isArtifactSelected","setIsArtifactSelected","location","useLocation","token","useToken","addAlert","useSnackBars","loggedIn","artifactId","useParams","notFound","setNotFound","loading","setLoading","artifact","setArtifact","attributes","value","description","model","texture","selectedVisualization","setSelectedVisualization","type","fetch","concat","API_URLS","DETAILED_ARTIFACT","headers","Authorization","then","response","ok","status","json","console","log","finally","artifactSelectedStatus","some","a","handleClick","async","parseInt","NotFound","Typography","Button","handleRedirect","state","from","CircularProgress","ImageVisualization","ModelVisualization","Carousel","Category","fontSize","style","verticalAlign","label","Diversity3","LocalOffer","tag"],"sourceRoot":""}