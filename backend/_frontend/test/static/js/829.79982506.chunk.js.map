{"version":3,"file":"static/js/829.79982506.chunk.js","mappings":"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","sources":["pages/ArtifactDetails/components/ImageUploader.jsx","pages/ArtifactDetails/components/EditArtifact.jsx","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { Grid, IconButton, Button, Box, FormLabel } from \"@mui/material\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { styled } from \"@mui/material/styles\";\nimport { useSnackBars } from \"../../../hooks/useSnackbars\";\n\n/**\n * ImageUploader component allows users to upload and manage multiple images.\n * It displays uploaded images with an option to delete them.\n * @param {Object} props - Component props.\n * @param {string} props.label - Label for the image uploader component.\n * @param {string} props.name - Name identifier for the uploader component.\n * @param {Array} props.images - Array of currently uploaded images.\n * @param {Function} props.onListChange - Callback function to update the image list.\n * @param {Array} props.allowedImageTypes - Array of allowed image file types.\n * @returns {JSX.Element} Component for uploading and managing images.\n */\nconst ImageUploader = ({\n  label,\n  name,\n  images,\n  onListChange,\n  allowedImageTypes,\n}) => {\n  const { addAlert } = useSnackBars();\n\n  // Memoize image URLs to avoid unnecessary re-renders\n  const imageURLs = useMemo(\n    () =>\n      images.map((fileOrUrlString) => {\n        if (fileOrUrlString instanceof File) {\n          return URL.createObjectURL(fileOrUrlString);\n        }\n        return fileOrUrlString;\n      }),\n    [images]\n  );\n\n  // Concatenate allowed image types for display\n  const allowedTypesLabel = allowedImageTypes.join(\", \");\n\n  // Handle image upload event\n  const handleImageUpload = (e) => {\n    const newFilesArray = Array.from(e.target.files);\n\n    // Extract file types from uploaded files\n    const fileTypes = newFilesArray.map((file) => file.name.split(\".\").pop());\n    const expectedFileTypes = allowedImageTypes;\n\n    // Check if file type is allowed\n    if (fileTypes.some((fileType) => !expectedFileTypes.includes(fileType))) {\n      addAlert(\"Tipo de archivo no permitido\");\n      return;\n    }\n\n    // Update the image list with newly uploaded files\n    onListChange((prevState) => ({\n      ...prevState,\n      [name]: [...images, ...newFilesArray],\n    }));\n  };\n\n  // Handle image deletion\n  const handleDeleteImage = (index) => {\n    const imagesWithoutRemovedIndex = images.filter((_, i) => i !== index);\n\n    // Update the image list by removing the selected image\n    onListChange((prevState) => ({\n      ...prevState,\n      [name]: imagesWithoutRemovedIndex,\n    }));\n  };\n\n  return (\n    <Grid container rowGap={2}>\n      {/* Label for the image uploader */}\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Grid container rowGap={2}>\n        <Grid item>\n          {/* Button to trigger file input */}\n          <Button\n            component=\"label\"\n            variant=\"outlined\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Cargar más imágenes ({allowedTypesLabel})\n            <input type=\"file\" multiple hidden onChange={handleImageUpload} />\n          </Button>\n        </Grid>\n        <Grid container spacing={2}>\n          {/* Display uploaded images with delete option */}\n          {imageURLs.map((preview, index) => (\n            <Grid item key={index}>\n              <Box position=\"relative\">\n                <img src={preview} alt={index} width=\"100\" height=\"100\" />\n                {/* Delete button for each image */}\n                <CustomIconButton onClick={() => handleDeleteImage(index)}>\n                  <DeleteIcon />\n                </CustomIconButton>\n              </Box>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\n// Custom styled IconButton for the delete button\nconst CustomIconButton = styled(IconButton)(({ theme }) => ({\n  position: \"absolute\",\n  top: 4,\n  right: 4,\n  width: 24,\n  height: 24,\n  padding: 0,\n  backgroundColor: \"rgba(255, 255, 255, 0.8)\",\n  borderRadius: \"50%\",\n  color: \"red\",\n  \"&:hover\": {\n    backgroundColor: \"rgba(255, 255, 255, 1)\",\n  },\n  \"& .MuiSvgIcon-root\": {\n    fontSize: 20,\n  },\n}));\n\nexport default ImageUploader;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation, useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  FormLabel,\n  Box,\n} from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport UploadButton from \"../../sharedComponents/UploadButton\";\nimport AutocompleteExtended from \"../../sharedComponents/AutocompleteExtended\";\nimport { API_URLS } from \"../../../api\";\nimport ImageUploader from \"./ImageUploader\";\nimport NotFound from \"../../../components/NotFound\";\nimport { useSnackBars } from \"../../../hooks/useSnackbars\";\nimport { useToken } from \"../../../hooks/useToken\";\nimport { allowedFileTypes } from \"../../Catalog/CreateArtifact\";\n\n/**\n * EditArtifact component allows editing artifact details, including uploads, descriptions, and metadata.\n * @returns {JSX.Element} Component for editing artifact details.\n */\nconst EditArtifact = () => {\n  const navigate = useNavigate(); // Navigation hook for redirection\n  const location = useLocation(); // Location hook for current route information\n  const { artifactId } = useParams(); // Retrieves parameters from the route\n  const { addAlert } = useSnackBars(); // Accesses addAlert function from SnackbarProvider\n  const { token } = useToken(); // Retrieves authentication token from TokenProvider\n\n  // State variables for managing component state\n  const [notFound, setNotFound] = useState(false); // State for indicating if artifact is not found\n  const [updatedArtifact, setUpdatedArtifact] = useState({ // State for storing updated artifact data\n    object: \"\",\n    texture: \"\",\n    material: \"\",\n    thumbnail: \"\",\n    images: [],\n    description: \"\",\n    shape: {\n      id: \"\",\n      value: \"\",\n    },\n    culture: {\n      id: \"\",\n      value: \"\",\n    },\n    tags: [],\n  });\n\n  const [loading, setLoading] = useState(true); // State for indicating loading state\n  const [errors, setErrors] = useState(false); // State for indicating errors\n\n  const goBack = !!location.state?.from; // Determines if user should navigate back\n\n  // State variables for storing API data\n  const [shapeOptions, setShapeOptions] = useState([]); // State for storing shape options\n  const [cultureOptions, setCultureOptions] = useState([]); // State for storing culture options\n  const [tagOptions, setTagOptions] = useState([]); // State for storing tag options\n  \n  // require all model 3d data if you put one of them\n  const [requiredModelData, setRequiredModelData] = useState(false);\n\n  useEffect(() => {\n    if (updatedArtifact.object || updatedArtifact.texture || updatedArtifact.material) {\n      setRequiredModelData(true);\n    } else {\n      setRequiredModelData(false);\n    }\n  }, [updatedArtifact.object, updatedArtifact.texture, updatedArtifact.material]);\n\n\n  // Fetch artifact data from the API\n  useEffect(() => {\n    fetch(`${API_URLS.DETAILED_ARTIFACT}/${artifactId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          if (response.status === 404) {\n            setNotFound(true);\n            return;\n          }\n        }\n        return response.json();\n      })\n      .then((response) => {\n        let { attributes, thumbnail, model, images } = response;\n        // Update state with fetched artifact data\n        setUpdatedArtifact({\n          thumbnail: thumbnail,\n          images: images,\n          ...model,\n          ...attributes,\n        });\n      });\n  }, [artifactId, token]);\n\n  // Fetch metadata options from the API\n  useEffect(() => {\n    fetch(API_URLS.ALL_METADATA, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        let metadata = data.data;\n        let shapes = metadata.shapes;\n        let cultures = metadata.cultures;\n        let tags = metadata.tags;\n\n        // Update state with fetched metadata\n        setShapeOptions(shapes);\n        setCultureOptions(cultures);\n        setTagOptions(tags);\n      })\n      .catch((error) => {\n        setErrors(true);\n        addAlert(error.message);\n      })\n      .finally(() => setLoading(false));\n  }, [token]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Handles input change events and updates state\n  const handleInputChange = (name, value) => {\n    setUpdatedArtifact({ ...updatedArtifact, [name]: value });\n  };\n\n  // Handles form submission for updating artifact\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (requiredModelData){\n      if (!updatedArtifact.object || !updatedArtifact.texture || !updatedArtifact.material) {\n        addAlert(\"Por favor, sube los archivos necesarios para el modelo 3D.\");\n        return;\n      }\n    } else {\n      if (updatedArtifact.images.length === 0) {\n        addAlert(\"Por favor, sube al menos una imagen del objeto.\");\n        return;\n      }\n    }\n\n    const formData = new FormData();\n\n    // Append new files or file names to form data\n    if (updatedArtifact.object instanceof File) {\n      formData.append(\"model[new_object]\", updatedArtifact.object);\n    }\n    if (updatedArtifact.texture instanceof File) {\n      formData.append(\"model[new_texture]\", updatedArtifact.texture);\n    }\n    if (updatedArtifact.material instanceof File) {\n      formData.append(\"model[new_material]\", updatedArtifact.material);\n    }\n    if (updatedArtifact.thumbnail instanceof File) {\n      formData.append(\"new_thumbnail\", updatedArtifact.thumbnail);\n    } else if (typeof updatedArtifact.thumbnail === \"string\") {\n      formData.append(\n        \"thumbnail\",\n        updatedArtifact.thumbnail.split(\"/\").pop()\n      );\n    }\n\n    updatedArtifact.images.forEach((image) => {\n      if (image instanceof File) {\n        formData.append(\"new_images\", image);\n      } else if (typeof image === \"string\") {\n        formData.append(\"images\", image.split(\"/\").pop());\n      }\n    });\n\n    formData.append(\"description\", updatedArtifact.description);\n    formData.append(\"id_shape\", updatedArtifact.shape.id);\n    formData.append(\"id_culture\", updatedArtifact.culture.id);\n\n    updatedArtifact.tags.forEach((tag) =>\n      formData.append(\"id_tags\", tag.id)\n    );\n\n    // Send update request to API\n    await fetch(\n      `${API_URLS.DETAILED_ARTIFACT}/${artifactId}/update`,\n      {\n        method: \"POST\",\n        body: formData,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then(() => {\n        addAlert(\"¡Objeto editado con éxito!\");\n        navigate(`/catalog/${artifactId}`);\n      })\n      .catch((error) => {\n        addAlert(error.message);\n      });\n  };\n\n  // Utility function to get filename or URL from item\n  const getFileNameOrUrl = (item) => {\n    if (typeof item === \"object\" && item !== null) {\n      return item.name;\n    }\n    if (typeof item === \"string\" && item.includes(\"/\")) {\n      return item.split(\"/\").pop();\n    }\n    return item;\n  };\n\n  // Handles cancellation and navigation\n  const handleCancel = () => {\n    const from = goBack ? location.state.from : `/catalog`;\n    navigate(from, { replace: goBack });\n  };\n\n  return (\n    <>\n      {notFound ? (\n        <NotFound />\n      ) : (\n        <Container>\n          <Box component=\"form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n            <Grid container rowGap={4}>\n              <CustomTypography variant=\"h1\">\n                Editar pieza {artifactId}\n              </CustomTypography>\n              <Grid container spacing={2}>\n                {/* Column for file uploads and image upload */}\n                <ColumnGrid item xs={6} rowGap={2}>\n                  <UploadButton\n                    label={requiredModelData ? \"Objeto *\" : \"Objeto\"}\n                    name=\"object\"\n                    isRequired={requiredModelData}\n                    setStateFn={setUpdatedArtifact}\n                    initialFilename={getFileNameOrUrl(\n                      updatedArtifact.object\n                    )}\n                  />\n                  <UploadButton\n                    label={requiredModelData ? \"Textura *\" : \"Textura\"}\n                    name=\"texture\"\n                    isRequired={requiredModelData}\n                    setStateFn={setUpdatedArtifact}\n                    initialFilename={getFileNameOrUrl(\n                      updatedArtifact.texture\n                    )}\n                  />\n                  <UploadButton\n                    label={requiredModelData ? \"Material *\" : \"Material\"}\n                    name=\"material\"\n                    isRequired={requiredModelData}\n                    setStateFn={setUpdatedArtifact}\n                    initialFilename={getFileNameOrUrl(\n                      updatedArtifact.material\n                    )}\n                  />\n                  <UploadButton\n                    label=\"Miniatura (opcional)\"\n                    name=\"thumbnail\"\n                    setStateFn={setUpdatedArtifact}\n                    initialFilename={getFileNameOrUrl(\n                      updatedArtifact.thumbnail\n                    )}\n                  />\n                  <ImageUploader\n                    label=\"Imágenes (opcional)\"\n                    name=\"images\"\n                    images={updatedArtifact.images}\n                    onListChange={setUpdatedArtifact}\n                    allowedImageTypes={allowedFileTypes.images}\n                  />\n                </ColumnGrid>\n\n                {/* Column for description, shape, culture, and tags */}\n                <ColumnGrid item xs={6} rowGap={1}>\n                  <FormLabel component=\"legend\">Descripción *</FormLabel>\n                  <TextField\n                    required\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Descripción del objeto\"\n                    multiline\n                    rows={4}\n                    fullWidth\n                    value={updatedArtifact.description}\n                    onChange={(e) =>\n                      handleInputChange(e.target.name, e.target.value)\n                    }\n                  />\n                  <FormLabel component=\"legend\">Forma *</FormLabel>\n                  <AutocompleteExtended\n                    id=\"shape\"\n                    name=\"shape\"\n                    value={updatedArtifact.shape}\n                    setValue={handleInputChange}\n                    options={shapeOptions}\n                    placeholder=\"Seleccionar la forma del objeto\"\n                    isRequired\n                    fullWidth\n                    filterSelectedOptions\n                    disabled={loading || errors}\n                  />\n                  <FormLabel component=\"legend\">Cultura *</FormLabel>\n                  <AutocompleteExtended\n                    id=\"culture\"\n                    name=\"culture\"\n                    value={updatedArtifact.culture}\n                    setValue={handleInputChange}\n                    options={cultureOptions}\n                    placeholder=\"Seleccionar la cultura del objeto\"\n                    isRequired\n                    fullWidth\n                    filterSelectedOptions\n                    disabled={loading || errors}\n                  />\n                  <FormLabel component=\"legend\">Etiquetas (opcional)</FormLabel>\n                  <AutocompleteExtended\n                    multiple\n                    limitTags={3}\n                    fullWidth\n                    id=\"tags\"\n                    name=\"tags\"\n                    value={updatedArtifact.tags}\n                    setValue={handleInputChange}\n                    options={tagOptions}\n                    placeholder=\"Seleccionar las etiquetas del objeto\"\n                    filterSelectedOptions\n                    disabled={loading || errors}\n                  />\n                </ColumnGrid>\n              </Grid>\n\n              {/* Buttons for cancel and update */}\n              <Grid container justifyContent=\"flex-end\" columnGap={2}>\n                <Button\n                  variant=\"text\"\n                  color=\"secondary\"\n                  onClick={handleCancel}\n                >\n                  {goBack ? \"Cancelar\" : \"Volver al catálogo\"}\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                >\n                  Actualizar\n                </Button>\n              </Grid>\n            </Grid>\n          </Box>\n        </Container>\n      )}\n    </>\n  );\n};\n\n// Styled components for custom typography and grid columns\nconst CustomTypography = styled(Typography)(({ theme }) => ({\n  marginTop: theme.spacing(6),\n  textAlign: \"left\",\n}));\n\nconst ColumnGrid = styled(Grid)(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n}));\n\nexport default EditArtifact;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],"names":["CustomIconButton","styled","IconButton","_ref2","theme","position","top","right","width","height","padding","backgroundColor","borderRadius","color","fontSize","_ref","label","name","images","onListChange","allowedImageTypes","addAlert","useSnackBars","imageURLs","useMemo","map","fileOrUrlString","File","URL","createObjectURL","allowedTypesLabel","join","_jsxs","Grid","container","rowGap","children","_jsx","FormLabel","component","item","Button","variant","startIcon","CloudUploadIcon","type","multiple","hidden","onChange","e","newFilesArray","Array","from","target","files","fileTypes","file","split","pop","expectedFileTypes","some","fileType","includes","prevState","spacing","preview","index","Box","src","alt","onClick","imagesWithoutRemovedIndex","filter","_","i","handleDeleteImage","DeleteIcon","CustomTypography","Typography","marginTop","textAlign","ColumnGrid","display","flexDirection","EditArtifact","_location$state","navigate","useNavigate","location","useLocation","artifactId","useParams","token","useToken","notFound","setNotFound","useState","updatedArtifact","setUpdatedArtifact","object","texture","material","thumbnail","description","shape","id","value","culture","tags","loading","setLoading","errors","setErrors","goBack","state","shapeOptions","setShapeOptions","cultureOptions","setCultureOptions","tagOptions","setTagOptions","requiredModelData","setRequiredModelData","useEffect","fetch","concat","API_URLS","DETAILED_ARTIFACT","headers","Authorization","then","response","ok","status","json","attributes","model","ALL_METADATA","Error","statusText","data","metadata","shapes","cultures","catch","error","message","finally","handleInputChange","getFileNameOrUrl","_Fragment","NotFound","Container","autoComplete","onSubmit","async","preventDefault","length","formData","FormData","append","forEach","image","tag","method","body","xs","UploadButton","isRequired","setStateFn","initialFilename","ImageUploader","allowedFileTypes","TextField","required","placeholder","multiline","rows","fullWidth","AutocompleteExtended","setValue","options","filterSelectedOptions","disabled","limitTags","justifyContent","columnGap","handleCancel","replace","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}